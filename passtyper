#!/usr/bin/env bash

shopt -s nullglob globstar

config="${XDG_CONFIG_HOME:-$HOME/.config}/passtyper/config"

# Config file containing env variables FALLBACKUSER and/or FALLBACKUSERSUFFIX.
[[ -f "${config}" ]] && . "${config}"

clip_time="${PASSWORD_STORE_CLIP_TIME:-45}"

# Provided by zx2c4 under the MIT license, from the pass core code. Need to do
# this because we need to send more than just the password to the clipboard.
clip() {
	# This base64 business is because bash cannot store binary data in a shell
	# variable. Specifically, it cannot store nulls nor (non-trivally) store
	# trailing new lines.
	local sleep_argv0="password store sleep on display $DISPLAY"
	pkill -f "^$sleep_argv0" 2>/dev/null && sleep 0.5
	local before="$(xclip -o -selection "$X_SELECTION" 2>/dev/null | $BASE64)"
	echo -n "$1" | xclip -selection "$X_SELECTION" || die "Error: Could not copy data to the clipboard"
	(
		( exec -a "$sleep_argv0" bash <<<"trap 'kill %1' TERM; sleep '$clip_time' & wait" )
		local now="$(xclip -o -selection "$X_SELECTION" | $BASE64)"
		[[ $now != $(echo -n "$1" | $BASE64) ]] && before="$now"

		# It might be nice to programatically check to see if klipper exists,
		# as well as checking for other common clipboard managers. But for now,
		# this works fine -- if qdbus isn't there or if klipper isn't running,
		# this essentially becomes a no-op.
		#
		# Clipboard managers frequently write their history out in plaintext,
		# so we axe it here:
		qdbus org.kde.klipper /klipper org.kde.klipper.klipper.clearClipboardHistory &>/dev/null

		echo "$before" | $BASE64 -d | xclip -selection "$X_SELECTION"
	) >/dev/null 2>&1 & disown
	echo "Copied $2 to clipboard. Will clear in $clip_time seconds."
}
# End shameless copying here.

givepassword=1
giveusername=0
separator=$'\t'

opts=$(getopt --name 'passtyper' --options 'p::s:u::' --longoptions 'password::,separator:,username::' -- "$@")

if [ $? -ne 0 ]
then
	echo 'Terminating...' >&2
	exit 1
fi

eval set -- "${opts}"
unset opts

while true
do
	case "$1" in
		'-p'|'--password')
			case "$2" in
				''|'t'|'type')
					givepassword=1
				;;
				'c'|'clipboard')
					givepassword=2
				;;
				'n'|'none')
					givepassword=0
				;;
				*)
					echo "Invalid option for password: '$2'. Valid options are: (t)ype,(c)lipboard,(n)one. Defaults to type." >&2
					exit 1
				;;
			esac
			shift 2
			continue
		;;
		'-s'|'--separator')
			printf -v separator "$2"
			shift 2
			continue
		;;
		'-u'|'--username')
			case "$2" in
				''|'t'|'type')
					giveusername=1
				;;
				'c'|'clipboard')
					giveusername=2
				;;
				'n'|'none')
					giveusername=0
				;;
				*)
					echo "Invalid option for username: '$2'. Valid options are: (t)ype,(c)lipboard,(n)one. Defaults to type if present, none otherwise." >&2
					exit 1
				;;
			esac
			shift 2
			continue
		;;
		'--')
			shift
			break
		;;
		*)
			echo 'Internal error!' >&2
			exit 1
		;;
	esac
done

prefix=${PASSWORD_STORE_DIR-~/.password-store}
password_files=( "${prefix}"/**/*.gpg )
password_files=( "${password_files[@]#"${prefix}"/}" )
password_files=( "${password_files[@]%.gpg}" )

dmenu_prompt="passtyper:"
if [[ "${giveusername}" -eq 1 ]]
then
	dmenu_prompt="${dmenu_prompt} user typed"
elif [[ "${giveusername}" -eq 2 ]]
then
	dmenu_prompt="${dmenu_prompt} user copied"
fi

if [[ "${giveusername}" -ne 0 ]] && [[ "${givepassword}" -ne 0 ]]
then
	dmenu_prompt="${dmenu_prompt},"
fi

if [[ "${givepassword}" -eq 1 ]]
then
	dmenu_prompt="${dmenu_prompt} password typed"
elif [[ "${givepassword}" -eq 2 ]]
then
	dmenu_prompt="${dmenu_prompt} password copied"
fi

dmenu_prompt="${dmenu_prompt}>"

echo "$@"
password_file=$(printf '%s\n' "${password_files[@]}" | dmenu -i -p "${dmenu_prompt}" "$@")

[[ -n "${password_file}" ]] || exit

# IFF password=2 (clipboard) & username=0 (no username), revert to pass show -c.
if [[ "${givepassword}" -eq 2 ]] && [[ "${giveusername}" -eq 0 ]]
then
	pass show -c "${password_file}" 2> /dev/null
	exit 0
fi

typestring=""
clipstring=""
passdata="$(pass show ${password_file} 2> /dev/null)"
password="${passdata%%$'\n'*}"
passdata="${passdata#${password}}"
passdata="${passdata#$'\n'}"

[[ -n "${password}" ]] || exit

# Retrieve username. We don't bother calling out to pass show -c because
# username-fields are often prefixed with "username:"
if [[ "${giveusername}" -ne 0 ]]
then
	if [[ -n "${passdata}" ]]
	then
		username="$(<<<"${passdata}" sed -ne '/^username: /I s/^username: //I p')"
		if [[ -z "${username}" ]]
		then
			# Fallback to line 2 of the file. if it does not contain spaces and :.
			username="${passdata#*$'\n'}"
			if [[ "${username}" == *":"* ]] || [[ "${username}" == *" "* ]]
			then
				username=""
			fi
		fi
	fi

	if [[ -z "${username}" ]]
	then
		if [[ -z "${FALLBACKUSER}" ]]
		then
			username="${password_file##*/}${FALLBACKUSERSUFFIX}"
		else
			username="${FALLBACKUSER}"
		fi
	fi

	if [[ "${giveusername}" -eq 1 ]]
	then
		typestring="${username}"
	elif [[ "${giveusername}" -eq 2 ]]
	then
		clipstring="${username}"
	fi
fi

if [[ "${givepassword}" -eq 1 ]]
then
	if [[ -n "${typestring}" ]]
	then
		typestring="${typestring}${separator}${password}"
	else
		typestring="${password}"
	fi
elif [[ "${givepassword}" -eq 2 ]]
then
	if [[ -n "${clipstring}" ]]
	then
		clipstring="${clipstring}${separator}${password}"
	else
		clipstring="${password}"
	fi
fi

if [[ -n "${typestring}" ]]
then
	printf "%s" "${typestring}" | xdotool type --clearmodifiers --file -
fi

# Clip even if empty clipstring if clip was requested, because the user doesn't expect
# the clipboard to be filled with old data just because we couldn't figure out what to
# put in there. Empty is better than wrong.
if [[ "${givepassword}" -eq 2 ]] || [[ "${giveusername}" -eq 2 ]]
then
	clip "${clipstring}" "${password_file}"
fi

